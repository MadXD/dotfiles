#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
#
# changelog-first-entry - Extracts the first entry from a changelog to a temporary file
#
# Copyright (c) 2015 Lorenzo Villani
#
# The MIT License:
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from __future__ import print_function

import tempfile

class Fsm:
    Scanning, StartFound, EndFound = range(3)

    def __init__(self):
        self.state = self.Scanning

    def transition(self, new_state):
        if new_state == self.StartFound:
            assert self.state == self.Scanning
        elif new_state == self.EndFound:
            assert self.state == self.StartFound
        else:
            raise Exception('Requested transition to an invalid state')

        self.state = new_state

def main():
    fsm = Fsm()

    with open('CHANGELOG.md', 'r') as changelog:
        _, path = tempfile.mkstemp()

        with open(path, 'w') as tmp:
            for line in changelog:
                if line.startswith('## '):
                    if fsm.state != Fsm.StartFound:
                        fsm.transition(Fsm.StartFound)
                    else:
                        fsm.transition(Fsm.EndFound)

                        break

                if fsm.state == Fsm.StartFound:
                    tmp.write(line)

        print(path)

if __name__ == '__main__':
    main()
