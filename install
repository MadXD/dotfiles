#!/usr/bin/env python2.7
# -*- mode: python -*-
# -*- coding: utf-8 -*-

from __future__ import print_function

import argparse
import json
import os
import os.path
import subprocess
import sys


HERE = os.path.dirname(os.path.abspath(__file__))

MANIFEST = {
    "unix": [
        { "source": "bin", "dest": "~/.local/bin" },
        { "source": "fish", "dest": "~/.config/fish" },
        { "source": "misc", "dest": "~/" },
        { "source": "sublime-text-3", "dest": "~/.config/sublime-text-3" },
    ],
    "win32": [
        { "source": "emacs.d", "dest": "${APPDATA}\\.emacs.d" },
        { "source": "powershell", "dest": "${UserProfile}\\Documents\\WindowsPowerShell" },
        { "source": "sublime-text-3", "dest": "${APPDATA}\\Sublime Text 3" },
    ],
}


def main():
    process_entries(MANIFEST[platform()])


def platform():
    if sys.platform == "darwin" or sys.platform == "linux2":
        return "unix"
    elif sys.platform == "win32":
        return "win32"
    else:
        raise Exception("Unknown platform")


def process_entries(entries):
    for entry in entries:
        install(entry['source'], entry['dest'])


def install(source, dest):
    source_path = os.path.join(os.getcwd(), source)
    dest_path = os.path.expandvars(os.path.expanduser(dest))

    if os.path.isfile(source_path):
        symlink(source_path, dest_path)
    elif os.path.isdir(source_path):
        for dirpath, _, filenames in os.walk(source_path):
            for f in filenames:
                s = os.path.join(dirpath, f)
                d = os.path.join(dest_path, os.path.relpath(s, start=source))

                symlink(s, d)


def symlink(source, dest):
    dirname = os.path.dirname(dest)

    if not os.path.exists(dirname):
        os.makedirs(dirname)

    if os.path.lexists(dest):
        os.unlink(dest)

    if sys.platform == 'win32':
        subprocess.check_output(['cmd', '/C', 'mklink', dest, source])
    else:
        os.symlink(source, dest)


if __name__ == '__main__':
    main()
