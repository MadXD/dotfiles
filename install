#!/usr/bin/env python2.7
# -*- mode: python -*-
# -*- coding: utf-8 -*-

import os
import os.path
import sys


HERE = os.path.dirname(os.path.abspath(__file__))
MANIFEST = {
    "any": [
        { "source": "bin",     "dest": "~/.local/bin" },
        { "source": "emacs.d", "dest": "~/.emacs.d" },
        { "source": "fish",    "dest": "~/.config/fish" },
        { "source": "gradle",  "dest": "~/.gradle" },
        { "source": "misc",    "dest": "~/" },
    ],
    "darwin": [],
    "linux2": [
        { "source": "autostart",  "dest": "~/.config/autostart" },
        { "source": "fontconfig", "dest": "~/.config/fontconfig" },
        { "source": "gtk-3.0",    "dest": "~/.config/gtk-3.0" },
        { "source": "redshift",   "dest": "~/.config" },
        { "source": "terminator", "dest": "~/.config/terminator" },
    ],
}


def main():
    process_entries(MANIFEST['any'])
    process_entries(MANIFEST[sys.platform])


def process_entries(entries):
    for entry in entries:
        install(entry['source'], entry['dest'])


def install(top, dest):
    def visit(_, directory, entries):
        for entry in [os.path.join(directory, f) for f in entries]:
            if not os.path.isdir(entry):
                symlink(os.path.join(HERE, entry), os.path.join(os.path.expanduser(dest), os.path.relpath(entry, start=top)))

    os.path.walk(top, visit, None)


def symlink(source, dest):
    if not os.path.exists(os.path.dirname(dest)):
        os.makedirs(os.path.dirname(dest))

    if os.path.lexists(dest):
        os.unlink(dest)

    os.symlink(source, dest)

    # print source, '->', dest


if __name__ == '__main__':
    main()
